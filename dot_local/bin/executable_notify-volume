#!/usr/bin/env python

# Changes the volume and displays a notification with the information. This
# script can be called in several ways:
#
#   notify-volume       Sends a notification without modifying the volume
#   notify-volume n     Set volume to n percent
#   notify-volume +n    Increment volume by DELTA n times
#   notify-volume -n    Decrement volume by DELTA n times
#   notify-volume up    Increment volume by DELTA
#   notify-volume down  Decrement volume by DELTA
#   notify-volume mute  Toggle mute/unmute

import re
import subprocess
import sys

# The percentage to increase/decrease the volume.
DELTA = 5

# The encoding for subprocess communication.
ENCODING = "utf-8"

# The symbols to use to draw the volume bar
SYM = {
    "left": "┝",
    "left_alt": "│",
    "right": "┥",
    "right_alt": "│",
    "fill": "━",
    "empty": " ",
}

# Clamp a value in [0, 100].
def clamp(v):
    return 0 if v < 0 else (100 if v > 100 else v)

# Run a command and return the exit code, stdout, and stderr.
def run(cmd):
    p = subprocess.run(cmd, stdout=subprocess.PIPE)
    stdout = (p.stdout if p.stdout is not None else b"").decode(ENCODING).strip()
    stderr = (p.stderr if p.stderr is not None else b"").decode(ENCODING).strip()
    return p.returncode, stdout, stderr

# Run a command on the mixer. This automatically determines the approrpriate
# mixer command so only the arguments need to be given.
def mixer_run(args):
    # Find the device to use for `amixer` that works on the system
    cmd = None
    if run(["amixer", "get", "Master"])[0] == 0:
        cmd = ["amixer"]
    elif run(["amixer", "-D", "pulse", "get", "Master"])[0] == 0:
        cmd = ["amixer", "-D", "pulse"]
    if cmd is None:
        print("could not find mixer command", file=sys.stderr)
        sys.exit(1)
    cmd.extend(args)
    return run(cmd)

# Return the volume percentage and muted state.
def mixer_state(nearest=True):
    _, s, _ = mixer_run(["get", "Master"])
    mute = "[off]" in s
    volume = int(re.search("(\d+)%", s).group(1))
    if nearest:
        # Match the volume to the nearest multiple of DELTA
        volume = clamp(int(DELTA * round(volume / DELTA)))
    return volume, mute

# Set the volume percentage and muted state.
def mixer_set(volume, mute):
    mixer_run(["set", "Master", str(volume) + "%"])
    mixer_run(["set", "Master", "off" if mute else "on"])

# Notify the volume percentage and muted state.
def notify(volume, mute):
    # Build the bar
    length = int(round(100 / DELTA))
    fill = int(round(volume / DELTA))
    empty = length - fill
    bar = ""
    bar += SYM["left"] if fill else SYM["left_alt"]
    bar += SYM["fill"] * fill
    bar += SYM["empty"] * empty
    bar += SYM["right"] if empty else SYM["right_alt"]
    # Get the volume text
    if not mute:
        text = "{}%".format(volume)
    else:
        text = "Mute ({}%)".format(volume)
    # Show notification
    run(["notify-send",
        "-u", "low",
        "--hint=string:x-dunst-stack-tag:volume",
        "-a", "Volume",
        text])
        # bar + " " + text]) # Use this version for the volume bar

# Computes the next volume for an absolute change.
class ModeAbs:
    def __init__(self, volume):
        self.__volume = volume

    def next(self, _volume, _mute):
        return (clamp(self.__volume), False)

# Computes the next volume for a relative change.
class ModeRel:
    def __init__(self, n):
        self.__n = n

    def next(self, volume, _mute):
        next_volume = clamp(volume + DELTA * self.__n)
        next_mute = False
        if next_volume == 0:
            next_mute = True
        return (next_volume, next_mute)

# Computes the next volume for a mute.
class ModeMute:
    def __init__(self):
        pass

    def next(self, volume, mute):
        return (volume, not mute if volume > 0 else True)

if __name__ == "__main__":
    if len(sys.argv) == 1:
        mode = None
    elif len(sys.argv) == 2:
        arg = sys.argv[1]
        if re.match(r"^\d+$", arg):
            mode = ModeAbs(int(arg))
        elif re.match(r"^[+-]\d+$", arg):
            mode = ModeRel(int(arg))
        elif arg.lower() == "up":
            mode = ModeRel(+1)
        elif arg.lower() == "down":
            mode = ModeRel(-1)
        elif arg.lower() == "mute":
            mode = ModeMute()
        else:
            print("bad argument: {}".format(arg), file=sys.stderr)
            sys.exit(1)
    else:
        print("wrong number of arguments", file=sys.stderr)
        sys.exit(1)

    if mode is not None:
        mixer_set(*mode.next(*mixer_state()))
    notify(*mixer_state())
