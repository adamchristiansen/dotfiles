#!/usr/bin/env python3

import os
import pathlib

if "XDG_CONFIG_HOME" in os.environ:
  DEFAULT_SNIPDIR = os.path.join(os.environ["XDG_CONFIG_HOME"], "sniplets")
else:
  DEFAULT_SNIPDIR = os.path.join(os.environ["HOME"], ".config/sniplets")

def snipfiles(dir):
  """
  Get the absolute paths of all .snip files in a directory.
  """
  f = lambda f: str(f.absolute())
  return sorted(map(f, pathlib.Path(dir).glob("*.snip")))

class SnipletsDb:
  """
  Process sniplets into a database.
  """

  def __init__(self, snipdir=None):
    """
    Load a database from the specified snip directory. If no directory is
    specified, the DEFAULT_SNIPDIR is used. The database is sorted by key.
    """
    if not snipdir:
      snipdir = DEFAULT_SNIPDIR
    self._db = []
    for snipfile in snipfiles(snipdir):
      with open(snipfile) as f:
        for line in f:
          line = line.strip()
          if not line or line.startswith("#"):
            continue
          parts = tuple(filter(lambda x: x, line.split(" ")))
          key = tuple(parts[:-1])
          value = parts[-1]
          self._db.append((key, value))
    self._db.sort()

  def __getitem__(self, index):
    """
    Look up a value in the database by index.
    """
    return self._db[index][1]

  def fuzzy_lines(self):
    """
    Get the lines to print in a fuzzy finder.
    """
    width = max(map(lambda x: len(x[1]), self._db))
    fmt = "{{:{}}}{{}}".format(width + 1)
    f = lambda kv: fmt.format(kv[1], " ".join(kv[0]))
    return list(map(f, self._db))

if __name__ == "__main__":
  import argparse
  import sys

  from dotfiles import menu

  parser = argparse.ArgumentParser(
    description="Search for text sniplets")
  parser.add_argument("snipdir", nargs="?", default=None,
    help="The directory containing the sniplets")
  args = parser.parse_args()

  db = SnipletsDb(args.snipdir)
  lines = db.fuzzy_lines()
  sel_index = menu(lines)
  if sel_index is None:
    # Nothing was selected
    sys.exit(1)
  print(db[sel_index], end="")
