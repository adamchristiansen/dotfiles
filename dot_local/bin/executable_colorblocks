#!/usr/bin/env python3

import argparse

# ANSI color escapes
ESCAPES = {
    None: "\033[0m",  # Normal
    0:    "\033[30m", # Black
    1:    "\033[31m", # Red
    2:    "\033[32m", # Green
    3:    "\033[33m", # Yellow
    4:    "\033[34m", # Blue
    5:    "\033[35m", # Magenta
    6:    "\033[36m", # Cyan
    7:    "\033[37m", # White
    8:    "\033[1;30m", # Light Black
    9:    "\033[1;31m", # Light Red
    10:   "\033[1;32m", # Light Green
    11:   "\033[1;33m", # Light Yellow
    12:   "\033[1;34m", # Light Blue
    13:   "\033[1;35m", # Light Magenta
    14:   "\033[1;36m", # Light Cyan
    15:   "\033[1;37m", # Light White
}

C = {
    "top": "▄",
    "middle": "█",
    "bottom": "▀",
}

parser = argparse.ArgumentParser(
    description="Convert numbers between analog and digital representations")
parser.add_argument(
    "--height", metavar="H", action="store", type=int, default=4,
    help="block height")
parser.add_argument(
    "--width", metavar="W", action="store", type=int, default=7,
    help="block width")

args = parser.parse_args()

if args.height < 3:
    args.height = 3
if args.width < 3:
    args.width = 3

def c(fmt, *args, color=None, bright=False):
    if bright and color is not None and color < 8:
        color += 8
    esc = ESCAPES[color]
    fmt = fmt.replace("{}", "{}" + esc)
    return esc + fmt.format(*args) + ESCAPES[None]

lines = []

# Build the top row
s = ""
for color in range(0, 8):
    s += c(C["top"] * args.width, color=color, bright=True) + " "
lines.append(s)

# Build the middle rows
s = ""
for color in range(0, 8):
    s += c(C["middle"], color=color, bright=True)
    s += c(C["middle"] * (args.width - 2), color=color)
    s += c(C["middle"], color=color, bright=True)
    s += " "
for i in range(args.height - 2):
    lines.append(s)

# Build the bottom row
s = ""
for color in range(0, 8):
    s += c(C["bottom"] * args.width, color=color, bright=True) + " "
lines.append(s)

# Print the blocks
for i in range(len(lines)):
    lines[i] = lines[i].rstrip()
print("\n".join(lines))
