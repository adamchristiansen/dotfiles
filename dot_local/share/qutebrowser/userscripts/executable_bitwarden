#!/usr/bin/env python3

DESCRIPTION = """
Fills passwords from Bitwarden using [USERNAME]<Tab>[PASSWORD].
""".strip()

EPILOG = """
WARNING: The login credentials are written to the debug log (qute://log) and
are viewable as a series of fake-key calls. If a crash report is submitted
then confidential information may be shared.
""".strip()

import argparse
import enum
import json
import os
import subprocess
import sys

# The encoding for subprocess communication.
ENCODING = "utf-8"

class ExitCode(enum.IntEnum):
  SUCCESS = 0 # 0 is automatically returned on success
  FAILURE = 1 # 1 is automatically returned on exception
  NO_ENTRIES_FOUND = 2

def bitwarden_item(fuzzy_query=None):
  """
  Search Bitwarden for an item and return it as JSON. An optional fuzzy query
  can be made for sorting.
  """
  bw_query = os.path.join(os.environ["HOME"], ".local", "bin", "bw-query")
  cmd = [bw_query, "--sync", "--rofi", "--ask-gui", "--json"]
  if fuzzy_query is not None:
    cmd.extend(["--fuzzy", fuzzy_query])
  p = subprocess.run(cmd, stdout=subprocess.PIPE)
  if p.returncode:
    sys.exit(ExitCode.FAILURE)
  return json.loads(p.stdout.decode(ENCODING).strip())

def qutebrowser_cmd(cmd):
  """
  Write a command to qutebrowser.
  """
  with open(os.environ["QUTE_FIFO"], "w") as fifo:
    fifo.write(cmd + "\n")
    fifo.flush()

def qutebrowser_text(text):
  """
  Write a text sequence as keystrokes in qutebrowser.
  """
  for c in text:
    # Space needs to be quoted and all characters are escaped
    sequence = "\" \"" if c == " " else f"\{c}"
    qutebrowser_cmd(f"fake-key {sequence}")

if __name__ == "__main__":
  parser = argparse.ArgumentParser(description=DESCRIPTION, epilog=EPILOG)
  parser.add_argument("url", nargs="?", default=None)
  group = parser.add_mutually_exclusive_group()
  group.add_argument("--username", "-u", action="store_true",
      help="Only fill username")
  group.add_argument("--password", "-p", action="store_true",
      help="Only fill password")
  args = parser.parse_args()

  # Get the item from Bitwarden
  item = bitwarden_item(args.url)

  # When run outside of qutebrowser simply print the selected entry and exit
  if "QUTE_FIFO" not in os.environ:
    print(entry)
    sys.exit(ExitCode.SUCCESS)

  # Fill the fields in qutebrowser
  if args.username:
    qutebrowser_text(item["login"]["username"])
  elif args.password:
    qutebrowser_text(item["login"]["password"])
  else:
    qutebrowser_text(item["login"]["username"])
    qutebrowser_cmd("fake-key <Tab>")
    qutebrowser_text(item["login"]["password"])
  qutebrowser_cmd("mode-enter insert")
