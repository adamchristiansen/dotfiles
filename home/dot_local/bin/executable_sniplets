#!/usr/bin/env python3

import argparse
import pathlib

from dotfiles import menu, xdg

def snipfiles(dir):
  """Get the absolute paths of all .sniplets files in a directory."""
  f = lambda f: str(f.absolute())
  return sorted(map(f, pathlib.Path(dir).glob("*.sniplets")))

class SnipletsDb:
  """Process sniplets into a database."""

  def __init__(self, snipdir):
    """Load a database from the specified snip directory."""
    self._db = []
    for snipfile in snipfiles(snipdir):
      with open(snipfile) as f:
        for line in f:
          line = line.strip()
          if not line or line.startswith("#"):
            continue
          parts = tuple(filter(lambda x: x, line.split(" ")))
          key = tuple(parts[:-1])
          value = parts[-1]
          self._db.append((key, value))
    self._db.sort()

  def __getitem__(self, index):
    """Look up a value in the database by index."""
    return self._db[index][1]

  def fuzzy_lines(self):
    """Get the lines to print in a fuzzy finder."""
    width = max(map(lambda x: len(x[1]), self._db))
    fmt = "{{:{}}}{{}}".format(width + 1)
    f = lambda kv: fmt.format(kv[1], " ".join(kv[0]))
    return list(map(f, self._db))

parser = argparse.ArgumentParser(
  description="Search for text sniplets")
parser.add_argument("snipdir", nargs="?", default=xdg.config_home("sniplets"),
  help="The directory containing the sniplets")
args = parser.parse_args()

db = SnipletsDb(args.snipdir)
lines = db.fuzzy_lines()
index = menu(lines, index=True)
print(db[index], end="")
