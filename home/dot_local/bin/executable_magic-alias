#!/usr/bin/env python3

import collections
import os
import pathlib
import re
import sys

from dotfiles import fs, log, plat, xdg

ALIAS_FILE = xdg.config_home("aliases")

ALIAS_REGEXES = [
  re.compile(r"^alias\s+(\w+)=\'((?:\\.|[^\'\\])*)\'$"),
  re.compile(r"^alias\s+(\w+)=\"((?:\\.|[^\"\\])*)\"$"),
  re.compile(r"^alias\s+(\w+)=(\S*)$"),
]

SUBSHELL_REGEX = re.compile(r"\$\((?:[^$]*\$\([^)]*\))*[^)]*\)")

def find(line):
  """Find an alias statement in a line."""
  for r in ALIAS_REGEXES:
    m = re.search(r, line)
    if m is not None:
      return m
  return None

def replacement(value, quote_replace, subshell_outer, subshell_inner):
  """Replace quotes and subshell delimiters."""
  def replace(m):
    s = m[0][2:-1] # Strip the '$(' and ')' from the start and end
    s = s.replace("$(", subshell_inner[0]).replace(")", subshell_inner[1])
    s = subshell_outer[0] + s + subshell_outer[1]
    return s
  return re.sub(SUBSHELL_REGEX, replace, value.replace("'", quote_replace))

def alias_lines(alias_file=ALIAS_FILE):
  """Get the non-comment and non-empty lines from an aliases file."""
  lines = fs.read_file(alias_file).splitlines()
  lines = map(lambda x: x.strip(), lines)
  lines = filter(lambda x: x and not x.startswith("#"), lines)
  return lines

class Alias(plat.magic_shell):
  """Load all aliases."""

  def __init__(self):
    """Load all aliases into a database."""
    self._aliases = {}
    for line in alias_lines():
      m = find(line)
      if m is not None:
        name, value = m[1], m[2]
        self._aliases[name] = value
      else:
        log.fatal(f"invalid alias in {ALIAS_FILE}: {line}")

  def _map(self, f, quote_replace, subshell_outer, subshell_inner):
    """Map the exported variables into a specific format."""
    items = []
    for k, v in sorted(self._aliases.items()):
      vp = replacement(v, quote_replace, subshell_outer, subshell_inner)
      items.append(f(k, vp))
    return "\n".join(items)

  def magic_bourne(self):
    return self._map(
      f=lambda k, v: f"alias {k}=$'{v}'",
      quote_replace="\'\"\'\"\'",
      subshell_outer=("$(", ")"),
      subshell_inner=("$(", ")"))

  def magic_csh(self):
    return self._map(
      f=lambda k, v: f"alias {k} '{v}'",
      quote_replace="\\'",
      subshell_outer=("'(", ")'"),
      subshell_inner=("(", ")"))

  def magic_elvish(self):
    return self._map(
      f=lambda k, v: "\n".join([
        f"var fn~ = {{ |@args| {v} $@args }}",
        f"edit:add-var {k}~ $fn~",
      ]),
      quote_replace="''",
      subshell_outer=("(", ")"),
      subshell_inner=("(", ")"))

print(Alias().magic_shell())
