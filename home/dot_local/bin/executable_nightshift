#!/usr/bin/env python3

# Modifies the color temperature to make the screen easier to  look at in
# different brightness levels. The following parameters can be used:
#
#   off
#       Turns off the nightshift. This is the default.
#   dusk
#       Ideal for the evening, Slightly prefers reds.
#   night
#       Ideal for the night. Moderately prefers reds.
#   witch
#       Ideal for the witching hour. Aggressively prefers reds.
#
# When no shift parameter is supplied, the screen is reset to the default
# temperature.

import argparse
import sys

from dotfiles import notify, run

parser = argparse.ArgumentParser(
  description="Set the screen temperature")
group = parser.add_mutually_exclusive_group()
group.add_argument("-x", "--off",
  action="store_const", dest="args", const=("Normal", 6500),
  help="normal mode (6500K)")
group.add_argument("-d", "--dusk",
  action="store_const", dest="args", const=("Dusk", 5500),
  help="dusk mode (5500K)")
group.add_argument("-n", "--night",
  action="store_const", dest="args", const=("Night", 4500),
  help="night mode (4500K)")
group.add_argument("-w", "--witch",
  action="store_const", dest="args", const=("Witch", 3500),
  help="witch mode (3500K)")
parser.add_argument("--notify",
  action="store_true",
  help="send a notification")

args = parser.parse_args()
if args.args is not None:
  mode, temperature = args.args
else:
  mode, temperature = "Normal", 6500

# Always clear the current setting because the temperature stacks
# multiplicatively
r = run(["redshift", "-x"])
if r.exitcode != 0:
  print(r.stderr)
  sys.exit(1)
# Set the new temperature
r = run(["redshift", "-O", str(temperature)])
if r.exitcode != 0:
  print(r.stderr)
  sys.exit(2)

body = f"{mode} Mode ({temperature}K)"
if args.notify:
  notify(
    app="Nightshift",
    body=body,
    icon="face-cool",
    urgency="low",
    tag="nightshift",
  )
else:
  print(body)
