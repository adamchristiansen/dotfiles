#!/usr/bin/env python3

import argparse
import sys

from dotfiles import notify, run

CONST_NORMAL = ("Normal", 6500)
CONST_DUSK   = ("Dusk",   5500)
CONST_NIGHT  = ("Night",  4500)
CONST_WITCH  = ("Witch",  3500)

parser = argparse.ArgumentParser(
  description="Set the screen temperature")
group = parser.add_mutually_exclusive_group()
group.add_argument("-x", "--off",
  action="store_const", dest="args", const=CONST_NORMAL,
  help="normal mode (6500K)")
group.add_argument("-d", "--dusk",
  action="store_const", dest="args", const=CONST_DUSK,
  help="dusk mode (5500K)")
group.add_argument("-n", "--night",
  action="store_const", dest="args", const=CONST_NIGHT,
  help="night mode (4500K)")
group.add_argument("-w", "--witch",
  action="store_const", dest="args", const=CONST_WITCH,
  help="witch mode (3500K)")
parser.add_argument("--notify",
  action="store_true",
  help="send a notification")

args = parser.parse_args()
mode, temperature = args.args if args.args is not None else CONST_NORMAL

# Always clear the current setting first because the temperature stacks
# multiplicatively
r = run(["redshift", "-x"])
if r.exitcode != 0:
  print(r.stderr)
  sys.exit(1)

# Set the new temperature
r = run(["redshift", "-O", str(temperature)])
if r.exitcode != 0:
  print(r.stderr)
  sys.exit(2)

body = f"{mode} Mode ({temperature}K)"
if args.notify:
  notify(
    app="Nightshift",
    body=body,
    icon="face-cool",
    urgency="low",
    tag="nightshift",
  )
else:
  print(body)
