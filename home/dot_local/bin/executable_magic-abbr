#!/usr/bin/env python3

import collections
import os
import pathlib
import re
import sys

from dotfiles import fs, log, plat, xdg

ABBR_FILE = xdg.config_home("magicshell", "abbreviations")

ABBR_REGEXES = [
  re.compile(r"^alias\s+(\w+)=\'((?:\\.|[^\'\\])*)\'$"),
  re.compile(r"^alias\s+(\w+)=\"((?:\\.|[^\"\\])*)\"$"),
  re.compile(r"^alias\s+(\w+)=(\S*)$"),
]

SUBSHELL_REGEX = re.compile(r"\$\((?:[^$]*\$\([^)]*\))*[^)]*\)")

def find(line):
  """Find an alias statement in a line."""
  for r in ABBR_REGEXES:
    m = re.search(r, line)
    if m is not None:
      return m
  return None

def replacement(value, quote_replace, subshell_outer, subshell_inner):
  """Replace quotes and subshell delimiters."""
  def replace(m):
    s = m[0][2:-1] # Strip the '$(' and ')' from the start and end
    s = s.replace("$(", subshell_inner[0]).replace(")", subshell_inner[1])
    s = subshell_outer[0] + s + subshell_outer[1]
    return s
  return re.sub(SUBSHELL_REGEX, replace, value.replace("'", quote_replace))

def abbr_lines(abbr_file=ABBR_FILE):
  """Get the non-comment and non-empty lines from an abbreviations file."""
  lines = fs.read_file(abbr_file).splitlines()
  lines = map(lambda x: x.strip(), lines)
  lines = filter(lambda x: x and not x.startswith("#"), lines)
  return lines

class Abbr(plat.magic_shell):
  """Load all abbreviations."""

  def __init__(self):
    """Load all abbreviations into a database."""
    self._abbrs = {}
    for line in abbr_lines():
      m = find(line)
      if m is not None:
        name, value = m[1], m[2]
        self._abbrs[name] = value
      else:
        log.fatal(f"invalid abbreviation in {ABBR_FILE}: {line}")

  def _map(self, f, quote_replace, subshell_outer, subshell_inner):
    """Map the exported variables into a specific format."""
    items = []
    for k, v in sorted(self._abbrs.items()):
      vp = replacement(v, quote_replace, subshell_outer, subshell_inner)
      items.append(f(k, vp))
    return "\n".join(items)

  def magic_posix(self):
    return self._map(
      f=lambda k, v: f"alias {k}=$'{v}'",
      quote_replace="\'\"\'\"\'",
      subshell_outer=("$(", ")"),
      subshell_inner=("$(", ")"))

  def magic_csh(self):
    return self._map(
      f=lambda k, v: f"abbr -ga {k} {v}",
      quote_replace="'",
      subshell_outer=("'(", ")'"),
      subshell_inner=("(", ")"))

print(Abbr().magic_shell())
