#!/usr/bin/env python3

"""
A meta update manager.
"""

import argparse

from dotfiles import log, plat, run

parser = argparse.ArgumentParser(
  description='Install updates automagically.',
  formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument('--clean', '-c',
  action='store_true',
  help='clean cached and orphaned packages')
parser.add_argument('--dry-run', '-n',
  action='store_true',
  help='print actions without running anything')
parser.add_argument('--sudo', '-s',
  action='store_true',
  help='run with sudo (where appropriate)')
parser.add_argument('--update', '-u',
  action='store_true',
  help='update package index')
parser.add_argument('--upgrade', '-U',
  action='store_true',
  help='upgrade packages')
parser.add_argument('--yes', '-y',
  action='store_true',
  help='run without asking for confirmation')
args = parser.parse_args()

class PackageManager:
  """A package manager and the commands needed to use it."""

  def __init__(self,
      name,
      required_commands,
      required_conditions,
      command_update,
      command_upgrade,
      command_clean,
      can_use_sudo,
      yes_flag):
    """
    Create a new package manager.

    - name is the name of the package manager when displaying information.
    - required_commands must exist in the PATH for the package manager to run.
    - required_conditions are commands that must evaluate to true for the
      package manager to run.
    - command_update updates local package information.
    - command_upgrade upgrades the packages.
    - command_clean removes package orphans and remnants.
    - can_use_sudo indicates that the commands are allowed to be run as root.
    - yes_flag is added to commands to allow running without user confirmation.
    """
    self.name = name
    self.required_commands = required_commands
    self.required_conditions = required_conditions
    self.command_update = command_update
    self.command_upgrade = command_upgrade
    self.command_clean = command_clean
    self.can_use_sudo = can_use_sudo
    self.yes_flag = yes_flag

  def exists(self):
    """Test whether the package manager exists on the system."""
    if not plat.has_cmd(*self.required_commands):
      return False
    for condition in self.required_conditions:
      if run(condition).exitcode != 0:
        return False
    return True

  def run(self):
    """
    Run all prescribed operations if the package manager is present on the
    system.
    """
    if self.exists():
      if args.update:
        self.run_command('update', self.command_update)
      if args.upgrade:
        self.run_command('upgrade', self.command_upgrade)
      if args.clean:
        self.run_command('clean', self.command_clean)

  def run_command(self, action_name, command):
    """
    Run a command and exit the program if an error occurrs. action_name is the
    name of the action being run by the command.
    """
    if command is None:
      return
    if args.sudo and self.can_use_sudo:
      command = ['sudo'] + command
    if args.yes and self.yes_flag:
      command = command + [self.yes_flag]
    command_str = ' '.join(command)
    log.info(f"{self.name} {action_name} -> {command_str}")
    if not args.dry_run:
      r = run(command, capture=False)
      if r.exitcode != 0:
        log.fatal(f"{command_str} exited with {r.exitcode}")

# The available package managers. Keep sorted alphabetically by name
PACKAGE_MANAGERS = [
  PackageManager(
    name='apt',
    required_commands=['apt', 'apt-get'],
    required_conditions=[],
    command_update=['apt', 'update'],
    command_upgrade=['apt', 'upgrade'],
    command_clean=['apt', 'autoremove'],
    can_use_sudo=True,
    yes_flag='-y'
  ),
  PackageManager(
    name='brew',
    required_commands=['brew'],
    required_conditions=[],
    command_update=['brew', 'update'],
    command_upgrade=['brew', 'upgrade'],
    command_clean=['brew', 'cleanup'],
    can_use_sudo=False,
    yes_flag=None
  ),
  PackageManager(
    name='cargo',
    required_commands=['cargo', 'cargo-install-upgrade'],
    required_conditions=[],
    command_update=None,
    command_upgrade=['cargo', 'install-upgrade'],
    command_clean=None,
    can_use_sudo=False,
    yes_flag=None
  ),
  PackageManager(
    name='chezmoi',
    required_commands=['chezmoi'],
    required_conditions=[],
    command_update=None,
    command_upgrade=['chezmoi', 'upgrade'],
    command_clean=None,
    can_use_sudo=False,
    yes_flag=None
  ),
  PackageManager(
    name='pip',
    required_commands=['pipupgrade'],
    required_conditions=[],
    command_update=None,
    command_upgrade=['pipupgrade', '--latest'],
    command_clean=None,
    can_use_sudo=False,
    yes_flag='-y'
  ),
  PackageManager(
    name='rustup',
    required_commands=['rustup'],
    required_conditions=[],
    command_update=None,
    command_upgrade=['rustup', 'update'],
    command_clean=None,
    can_use_sudo=False,
    yes_flag=None
  ),
  PackageManager(
    name='xbps',
    required_commands=['xbps-install', 'xbps-remove'],
    required_conditions=[],
    command_update=['xbps-install', '-S'],
    command_upgrade=['xbps-install', '-u'],
    command_clean=['xbps-remove', '-oO'],
    can_use_sudo=True,
    yes_flag='-y'
  ),
]

for pm in sorted(PACKAGE_MANAGERS, key=lambda p: p.name):
  pm.run()
