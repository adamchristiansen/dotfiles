#!/usr/bin/env python3

"""
Manage the system volume.
"""

import argparse
import re
import sys
import textwrap

from dotfiles import log, notify, run

def clamp(v, lo, hi):
  return lo if v < lo else (hi if v > hi else v)

class Mode:
  def __init__(self, value=None):
    self.value = value

class ModeAbs(Mode):
  def next(self, _volume, _mute):
    return (clamp(self.value, 0, 100), False)

class ModeRel(Mode):
  def next(self, volume, _mute):
    next_volume = clamp(volume + args.delta * self.value, 0, 100)
    return (next_volume, not next_volume)

class ModeMute(Mode):
  def next(self, volume, mute):
    return (volume, not mute if volume > 0 else True)

def mode(arg):
  if arg is None:
    return None
  elif re.match(r"^\d+$", arg):
    return ModeAbs(int(arg))
  elif re.match(r"^[+-]\d+$", arg):
    return ModeRel(int(arg))
  elif arg.lower() == 'up':
    return ModeRel(+1)
  elif arg.lower() == 'down':
    return ModeRel(-1)
  elif arg.lower() == 'mute':
    return ModeMute()
  else:
    raise ValueError('unknown mode')

parser = argparse.ArgumentParser(
  description=textwrap.dedent("""
    Changes the volume and displays a notification with the information. This
    script can be called in several ways by settings the mode argument:

      {name}       Does not modifying the volume
      {name} p     Set volume to p percent
      {name} +n    Increment volume by delta n times
      {name} -n    Decrement volume by delta n times
      {name} up    Increment volume by delta
      {name} down  Decrement volume by delta
      {name} mute  Toggle mute/unmute
  """.format(name=sys.argv[0].split('/')[-1])),
  formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument('mode',
  type=mode,
  nargs='?',
  help='the control mode')
parser.add_argument('--delta',
  type=int, default=5,
  help='the amount to change the volume')
args = parser.parse_args()

def mixer_run(args):
  """Run a command on the mixer. Only the arguments need to be provided."""
  if run(['amixer', 'get', 'Master']).exitcode == 0:
    cmd = ['amixer']
  elif run(['amixer', '-D', 'pulse', 'get', 'Master']).exitcode == 0:
    cmd = ['amixer', '-D', 'pulse']
  if cmd is None:
    log.fata('could not find mixer command')
  cmd.extend(args)
  return run(cmd)

def mixer_state(nearest=True):
  """Get the volume percentage and muted state."""
  _, s, _ = mixer_run(['get', 'Master'])
  mute = '[off]' in s
  volume = int(re.search('(\d+)%', s).group(1))
  if nearest:
    # Match the volume to the nearest multiple of delta
    volume = clamp(int(args.delta * round(volume / args.delta)), 0, 100)
  return volume, mute

def mixer_set(volume, mute):
  mixer_run(['set', 'Master', f"{volume}%"])
  mixer_run(['set', 'Master', 'off' if mute else 'on'])

def notify_volume(volume, mute):
  text = f"{volume}%" if not mute else f"Mute ({volume}%)"
  if mute:
    icon = 'audio-volume-muted'
  else:
    if volume <= 33:
      icon = 'audio-volume-low'
    elif volume <= 67:
      icon = 'audio-volume-medium'
    else:
      icon = 'audio-volume-high'
  notify(
    app='Volume',
    summary=text,
    icon=icon,
    tag='volume',
    progress=volume if not mute else 0,
    urgency='low'
  )

if args.mode is not None:
  mixer_set(*args.mode.next(*mixer_state()))
notify_volume(*mixer_state())
